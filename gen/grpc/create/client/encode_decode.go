// Code generated by goa v3.16.1, DO NOT EDIT.
//
// create gRPC client encoders and decoders
//
// Command:
// $ goa gen olayml.xyz/gotrim/design

package client

import (
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	create "olayml.xyz/gotrim/gen/create"
	createpb "olayml.xyz/gotrim/gen/grpc/create/pb"
)

// BuildCreateFunc builds the remote method to invoke for "create" service
// "create" endpoint.
func BuildCreateFunc(grpccli createpb.CreateClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Create(ctx, reqpb.(*createpb.CreateRequest), opts...)
		}
		return grpccli.Create(ctx, &createpb.CreateRequest{}, opts...)
	}
}

// EncodeCreateRequest encodes requests sent to create create endpoint.
func EncodeCreateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*create.CreatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("create", "create", "*create.CreatePayload", v)
	}
	return NewProtoCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the create create endpoint.
func DecodeCreateResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*createpb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("create", "create", "*createpb.CreateResponse", v)
	}
	res := NewCreateResult(message)
	return res, nil
}
