// Code generated by goa v3.16.1, DO NOT EDIT.
//
// gotrim gRPC client CLI support package
//
// Command:
// $ goa gen olayml.xyz/gotrim/design

package cli

import (
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
	urlshortenerc "olayml.xyz/gotrim/gen/grpc/url_shortener/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `url-shortener create-short-url
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` url-shortener create-short-url --message '{
      "long_url": "Quia architecto odio odio qui."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		urlShortenerFlags = flag.NewFlagSet("url-shortener", flag.ContinueOnError)

		urlShortenerCreateShortURLFlags       = flag.NewFlagSet("create-short-url", flag.ExitOnError)
		urlShortenerCreateShortURLMessageFlag = urlShortenerCreateShortURLFlags.String("message", "", "")
	)
	urlShortenerFlags.Usage = urlShortenerUsage
	urlShortenerCreateShortURLFlags.Usage = urlShortenerCreateShortURLUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "url-shortener":
			svcf = urlShortenerFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "url-shortener":
			switch epn {
			case "create-short-url":
				epf = urlShortenerCreateShortURLFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "url-shortener":
			c := urlshortenerc.NewClient(cc, opts...)
			switch epn {
			case "create-short-url":
				endpoint = c.CreateShortURL()
				data, err = urlshortenerc.BuildCreateShortURLPayload(*urlShortenerCreateShortURLMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// url-shortenerUsage displays the usage of the url-shortener command and its
// subcommands.
func urlShortenerUsage() {
	fmt.Fprintf(os.Stderr, `Service is the UrlShortener service interface.
Usage:
    %[1]s [globalflags] url-shortener COMMAND [flags]

COMMAND:
    create-short-url: CreateShortURL implements CreateShortUrl.

Additional help:
    %[1]s url-shortener COMMAND --help
`, os.Args[0])
}
func urlShortenerCreateShortURLUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] url-shortener create-short-url -message JSON

CreateShortURL implements CreateShortUrl.
    -message JSON: 

Example:
    %[1]s url-shortener create-short-url --message '{
      "long_url": "Quia architecto odio odio qui."
   }'
`, os.Args[0])
}
