// Code generated by goa v3.16.1, DO NOT EDIT.
//
// UrlShortener HTTP client encoders and decoders
//
// Command:
// $ goa gen olayml.xyz/gotrim/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	urlshortener "olayml.xyz/gotrim/gen/url_shortener"
)

// BuildCreateShortURLRequest instantiates a HTTP request object with method
// and path set to call the "UrlShortener" service "CreateShortUrl" endpoint
func (c *Client) BuildCreateShortURLRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateShortURLURLShortenerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("UrlShortener", "CreateShortUrl", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateShortURLRequest returns an encoder for requests sent to the
// UrlShortener CreateShortUrl server.
func EncodeCreateShortURLRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*urlshortener.CreateShortURLPayload)
		if !ok {
			return goahttp.ErrInvalidType("UrlShortener", "CreateShortUrl", "*urlshortener.CreateShortURLPayload", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("UrlShortener", "CreateShortUrl", err)
		}
		return nil
	}
}

// DecodeCreateShortURLResponse returns a decoder for responses returned by the
// UrlShortener CreateShortUrl endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCreateShortURLResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("UrlShortener", "CreateShortUrl", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("UrlShortener", "CreateShortUrl", resp.StatusCode, string(body))
		}
	}
}
